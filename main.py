import torch
import torch.nn as nn
from torchvision import transforms
from io import BytesIO
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from models.adain import decoder, vgg, Net, style_transfer
from utils.image_io import load_image
import json

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

decoder = decoder
vgg = vgg

decoder.eval()
vgg.eval()

decoder.load_state_dict(torch.load('models_weights/decoder.pth'))
vgg.load_state_dict(torch.load('models_weights/vgg_normalised.pth'))
vgg = nn.Sequential(*list(vgg.children())[:31])

vgg.to(device)
decoder.to(device)

net = Net(vgg, decoder).to(device).eval()

# —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ chat_id
user_images = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Welcome message
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç–∏–ª—è!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:"
    )
    
    # Create a keyboard with two options
    reply_keyboard = [["–ü–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è", "–î—Ä—É–≥–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"]]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=markup,
        parse_mode="Markdown"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "–ü–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è":
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ *–∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–µ* –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞—Ç–µ–º *—Å—Ç–∏–ª–µ–≤–æ–µ*.",
            parse_mode="Markdown"
        )
    elif text == "–î—Ä—É–≥–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è":
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ! –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Check if user has selected style transfer option
    if update.message.text != "–ü–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è" and "content" not in user_images.get(update.message.chat_id, {}):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–ü–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è' –∏–∑ –º–µ–Ω—é.")
        return
    
    user_id = update.message.chat_id
    photo = await update.message.photo[-1].get_file()
    byte_img = await photo.download_as_bytearray()
    img_tensor = load_image(byte_img)

    if user_id not in user_images or "content" not in user_images[user_id]:
        user_images[user_id] = {"content": img_tensor}
        await update.message.reply_text("–ö–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∏–ª–µ–≤–æ–µ.")
    else:
        user_images[user_id]["style"] = img_tensor
        await update.message.reply_text("–°—Ç–∏–ª–µ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –í—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è...")
        content = user_images[user_id]["content"]
        style = user_images[user_id]["style"]
        with torch.no_grad():
            output = style_transfer(net.encode, decoder, content, style, alpha=1.0)
        buf = BytesIO()
        output = output.clamp(0, 1)
        transforms.ToPILImage()(output.squeeze(0).cpu()).save(buf, format="JPEG")
        buf.seek(0)
        await update.message.reply_photo(photo=buf, caption="–ì–æ—Ç–æ–≤–æ!")
        user_images[user_id] = {}  # —Å–±—Ä–æ—Å

def main():
    
    with open('config.json') as config_file:
        config = json.load(config_file)
    app = ApplicationBuilder().token(config['telegram_token']).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO, handle_image))

    app.run_polling()

if __name__ == '__main__':
    main()